version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_DB: smart_summarizer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ChromaDB for Vector Storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    hostname: chromadb
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    networks:
      - app-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_summarizer_api
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - chromadb
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/smart_summarizer
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    env_file:
      - .env
    volumes:
      - ./backend:/app
    command: sh -c "sleep 10 && uvicorn main:app --host 0.0.0.0 --port 8080 --reload"
    restart: unless-stopped
    networks:
      - app-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart_summarizer_ui
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  chroma_data:

networks:
  app-network:
    driver: bridge
